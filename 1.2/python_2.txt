variable swaping:

>>> a = 10
>>> b = 20

>>> temp = a
>>> a = b
>>> b = temp

>>> print(a)
20
>>> print(b)
10

INSTEAD YOU CAN DO:

>>> a, b = b, a


Multiple assignment:

a, b, c = 1, 2, 3

print(a, b, c)

SCALAR AND NON-SCALAR:

Scalar values are immutable (can't be modified after assignment it can only be deleted or reasigned a new value)

list:

1. int
2. float
3. bool
4. None

Expressions and Operators:

1. Integer division: value // value
2. Exponents: **

Order of operations:
Exponents > Integer Division > Float Division > 
Multiplication > Remainders > Addition > Subtraction

to read and weite in files:

f = open('codepractice1.txt', 'r')
lines = f.readlines()
[principal, rate, time_period] = [x.strip('\n') for x in lines]
f.close()

Tuples:

>>> temp = (36.5, 35.2, 31.6, 29.8, 29.9, 30.0, 28.8, 29.1)

len() <- length

subsetting tuples on tuples 

tuple[i][x]


Slicing:

seq[start:end:step]

end is not the end index, it's the nth position.

start defaults to 0, end defaults to nth and step defaults to 1

CONCATENATING TUPLES

>>> a = (1, 2, 3)
>>> b = ('four', 'five', 'six')
>>> c = a + b
(1, 2, 3, 'four', 'five', 'six')
>>> c = c + (7, )
(1, 2, 3, 'four', 'five', 'six', 7)

max() w strings returns the string that comes last alphabetically 
min()

The count() method of a tuple returns the occurrence of any 
specified value or object in it.

in keyword

tup.index(n) <-returns the index of a value

>>> tup = (2, 4, 6, 8, 10, 4)
>>> print(tup.index(4))

Lists are mutable

>>> animals = [‘ferret’, ‘cat’, ‘bat’, ‘dog’, ‘iguana’]

Replace a chunk of list

[0, 'one', 'two', 'three', 4, 'five', 6, 'seven']
>>> numbers[3:] = [3, 'four', 5, 'six', 7]
[0, 'one', 'two', 3, 'four', 5, 'six', 7]

APPEND
>>> numbers.append('eight')
[0, 'one', 'two', 3, 'four', 5, 'six', 7, 'eight']

LIKE APPEND BUT WITH A LIST (cab also just use +)
>>> extras = [9, 'ten', 11]
>>> numbers.extend(extras)
[0, 'one', 'two', 3, 'four', 5, 'six', 7, 'eight', 9, 'ten', 11]

INSERT (POSITION N, VALUE) 
>>> numbers.insert(2, 1.5)
>>> print(numbers)
[0, 'one', 1.5, 'two', 3, 'four', 5, 'six', 7, 'eight', 9, 'ten', 11]

REMOVE removes the first item to match the value 
>>> lst = [4, 3, 2, 1, 4]
>>> lst.remove(4)       
[3, 2, 1, 4]

POP
>>> lst = [10, 20, 30, 40, 50]
>>> lst.pop(1)
20

Asign Aliases affect the parent:

>>> a = [10, 20, 30, 40, 50]
>>> b = a
>>> b[2] = 300
>>> print(a)
[10, 20, 300, 40, 50]

If you use .copy() you can do it without affecting the original

>>> a = [10, 20, 30, 40, 50]
>>> b = a.copy()
>>> b[2] = 300
>>> print(a)
[10, 20, 30, 40, 50]    

SORT

>>> a = [5, 2, 4, 1, 6, 5, 9, 1]
>>> a.sort()
[1, 1, 2, 4, 5, 5, 6, 9]
>>> a.sort(reverse=True)
[9, 6, 5, 5, 4, 2, 1, 1]

REVERSE (not the same as sort(reverse=True))
>>> a = [2, 4, 6, 8, 1, 3, 5, 7]
>>> a.reverse()
>>> print(a)
[7, 5, 3, 1, 8, 6, 4, 2]

* in lists repeats the list
[5, 3, 2, 7, 10, 2, 3, 4]
>>> print(lst * 2)
[5, 3, 2, 7, 10, 2, 3, 4, 5, 3, 2, 7, 10, 2, 3, 4]

>>> s = "banana"
>>> print(len(s))
6

>>> fruit = 'orange'
>>> print(fruit[2])
a

JOIN

"<filler characters>".join([string 1, string 2, string 3, …])

>>> s1 = "hello"
>>> s2 = "WORLD"
>>> print(s1.upper())
HELLO
>>> print(s2.lower())
world
>>> print(s1.capitalize())
Hello


.strip() will strip certain characters on the sides
>>> s = "***a clean phrase***"
>>> print(s)
***a clean phrase***
>>> print(s.strip("*"))
a clean phrase

Like objects (keys must be immutable data types):

>>> scores = {
            'math':     7,
            'economics':    8,
            'geography':    10
        }
>>> scores['math']
7
>>> scores.get('math')
7

get function can also take a second parameter that specifies base value:

>>> print(scores.get('biology', "Score doesn't exist."))
Score doesn’t exist.

>>> random_dict = {
                1:      'one',
                'two':      2.0,
                (3, 'four'):    { 5: 'five', 6: 'six' }
              }

UPDATING DIC VLAUES

<dictionary name>[key] = value

Creates a new value
>>> scores['biology'] = 9   

Adds to existing value:
>>> scores['math'] += 1

DELETE KEY VALUE PAIRS:
<dictionary name>.pop(key)

>>> scores.pop('biology')
9
>>> print(scores)
{'math': 8, 'economics': 8, 'geography': 10}

CLEAR:
>>> scores.clear()
>>> print(scores)
{}

.keys() function returns all the keys of the dictionary in an
object called dict_keys

>>> scores.keys()
dict_keys(['math', 'economics', 'geography'])

This is how you can store it.
>>> keys_list = list(scores.keys())
>>> keys_list
['math', 'economics', 'geography']

on the other hand you get a list of the values:
>>> values_list = list(scores.values())
>>> values_list
[8, 8, 10]

to split them into tuples:
>>> item_list = list(scores.items())
>>> item_list
[('math', 8), ('economics', 8), ('geography', 10)]

to put two lists into a dictionary:
zip(<name of sequence containing keys>, <name of sequence containing values>)
>>> subjects = ['life sciences', 'art', 'computer science']
>>> scores = [7, 9, 8]
>>> z = zip(subjects, scores)
THEN YOU NEED TO TYPE CAST IT TO A DICTIONARY
>>> scores_dict = dict(z)





